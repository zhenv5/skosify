# Skosify configuration file for transforming simple OWL or RDFS ontologies into SKOS
# Can be used e.g. with the DCMI Type vocabulary:
# wget http://dublincore.org/2010/10/11/dctype.rdf -q -O - | ./skosify.py -c owl2skos.cfg -o dctype-skos.ttl

# runtime options which correspond to command line parameters
[options]
narrower=False
transitive=False
remove_aggregates=True
debug=False

[namespaces]
# this can be used to define custom RDF namespaces that can then be used in the mappings below (and will also be used in the output file)
# note that common namespaces should be pre-defined: rdf, rdfs, owl, skos, dc
# FinnONTO SKOS Extensions namespace
# skosext=http://purl.org/finnonto/schema/skosext#

# define what to do with types in the source vocabulary, i.e. how these map to SKOS constructs
# key: full URI or localname (string)
# value: full URI, or None (to delete the instances)
# the <key> instances will be replaced with <value> instances.
# key may start with * which matches any localname prefix
[types]
owl:Class=skos:Concept
rdfs:Class=skos:Concept
#*Concept=skos:Concept

# define what to do with literal properties on Concepts
# key: full URI, or localname (string)
# value: full URI, or None (to delete the property)
# the <key> properties will be replaced with <value> properties
# key may start with * which matches any prefix
[literals]
rdfs:label=skos:prefLabel
rdfs:comment=skos:definition
#prefLabel=skos:prefLabel
#altLabel=skos:altLabel
#hiddenLabel=skos:hiddenLabel
#date=dc:date

# define what to do with relation properties on Concepts
# key: URIref, or localname (string)
# value: URIRef, or None (to delete the property)
# the <key> properties will be replaced with <value> properties
# key may start with * which matches any prefix
[relations]
rdfs:subClassOf=skos:broader
#owl:equivalentClass=skos:exactMatch
