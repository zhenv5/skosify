# Skosify configuration file for transforming most FinnONTO ontologies into SKOS
#
# Can be used e.g. with the Finnish General Purpose Upper Ontology:
# ./skosify.py ysoJulkaisuversio.owl -c finnonto.cfg -o yso-skos.ttl
# (download the source vocabulary from ONKI first: http://onki.fi/en/browser/ )

# runtime options which correspond to command line parameters
[options]
narrower=True
transitive=False
enrich_mappings=False
aggregates=True
debug=False
break_cycles=True
cleanup_properties=True
cleanup_classes=True
cleanup_unreachable=True

# define custom RDF namespaces that can then be used in the mappings below (and will also be used in the output file)
# Note that common namespaces are already defined: rdf, rdfs, owl, skos, dc, dct
[namespaces]
# YSO metaschema namespace
ysometa=http://www.yso.fi/onto/yso-meta/2007-03-02/
# FinnONTO SKOS Extensions namespace
skosext=http://purl.org/finnonto/schema/skosext#


# define what to do with types in the source vocabulary, i.e. how these map to SKOS constructs
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the instances)
# the <key> instances will be replaced with <value> instances.
# key may start with * which matches any localname prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[types]
Concept=skos:Concept
AggregateConcept=skos:Concept
DeprecatedConcept=skosext:DeprecatedConcept
*Concept=skos:Concept
*concept=skos:Concept
SUOPlace=skos:Concept
GNSPlace=skos:Concept
GroupConcept=skos:Collection
*GroupConcept=skos:Collection
*groupConcept=skos:Collection
StructuringClass=


# define what to do with literal properties on Concepts
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the property)
# the <key> properties will be replaced with <value> properties
# key may start with * which matches any prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[literals]
ysometa.prefLabel=skosext:candidateLabel
prefLabel=skos:prefLabel
# at least TAO and VALO use rdfs:label
rdfs.label=skos:prefLabel
# AFO uses "ctx"
ctx=skos:prefLabel
altLabel=skos:altLabel
oldLabel=skos:altLabel
# AFO uses "fte" for English labels (may be more than 1, thus altLabel)
fte=skos:altLabel
# AFO uses "agx" for English Agrovoc label
agx=skos:altLabel
hiddenLabel=skos:hiddenLabel
note=skos:note
editorialNote=skos:scopeNote
comment=skos:scopeNote
ysaComment=skos:scopeNote
description=skos:scopeNote
tempLabel=
semanticTag=
semanticSvTag=
semTag=
semSvTag=
overlaps=
overlappedBy=
overlapsDefinition=
overlappedByDefinition=
ysaSource=dc:source
ysoSource=dc:source
allsoSource=dc:source
source=dc:source
eiYsa=
order=
creator=dc:creator
date=dc:date
# PUHO garbage
protegeLabelFi=
protegeLabelSv=
UILabel-fi=

# define what to do with relation properties on Concepts
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the property)
# the <key> properties will be replaced with <value> properties
# key may start with * which matches any prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[relations]
rdfs.subClassOf=skos:broader
owl.equivalentClass=skos:exactMatch
definedConcept=skos:closeMatch
partOf=skosext:partOf
broaderGeneric=skosext:broaderGeneric
broaderPartitive=skosext:broaderPartitive
exactMatch=skos:exactMatch
related=skos:related
associativeRelation=skos:related
uusiAssociativeRelation=skos:related
deprecatedSubClassOf=skos:broadMatch
deprecatedAssociativeRelation=skos:relatedMatch
deprecatedReplacedBy=dct:isReplacedBy
# TAO uses these:
RT=skos:related
LT=
ST=
KÄYTÄ=
# MAO uses these:
narrower_term=
broader_term=
# VALO uses this:
actuality=skos:related
